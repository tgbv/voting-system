# Mnemonic seed used by the account which deploys the contract
MNEMONIC="cat dog apple ..."

# Blockchain RPC URL. Can be HTTP or WSS, or compatible with Truffle HD-Provider. 
# I confirm it works with Infura.
RPC_URL="wss://ropsten.infura.io/ws/v3/26343......"

# URL to database
MONGO_URL="mongodb://mongo:27017"

# Port at which API server will listen
# It doesn't matter much, because it will still be proxied by nginx.
API_LISTEN_PORT=3000

# Port at which nginx will listen
NGINX_LISTEN_PORT=80

# The number of dummy records which will be inserted into database if (S_DB_IMPORT_DUMPS == true)
# KEEP IN MIND that each dump has its unique ETH address derived from its unique mnemonic! 
# When (S_SC_FUND_ETH_ADDRESSES == true) a sum of (SC_FUND_ETH_AMOUNT)ETH will be sent to EACH address from database!
#
# Set this number to a realistic sum able to cover all funding costs, otherwise users will not be able to vote.
DB_NR_OF_DUMPS=10

# The amount of ethereum to send to addresses if (S_SC_FUND_ETH_ADDRESSES == true)
# All wallets require a minimum nr of ethers in order to vote/interact with voting contract
#
# This should be set based on network. On ropsten 0.004 is ok to support gas fees.
SC_FUND_ETH_AMOUNT="0.004"

# Set to 'true' if you want the mongo database to be repopulated with dumps from scratch.
S_DB_IMPORT_DUMPS=true

# Set to 'true' if you want to migrate the contracts to the blockchain network provided at RPC_URL. 
S_SC_MIGRATE=true

# Set to 'true' if you want to update the merkle root of the smart contract which handles the voting.
# Merkle root is calculated from all ethereum addresses stored in database.
# It SHOULD be set to 'true' if (S_DB_IMPORT_DUMPS == true || S_SC_MIGRATE == true)
S_SC_IMPORT_MERKLE_ROOT=true

# Set to 'true' if you wish to fund the addresses from database.
# Keep in mind when they're generated they're broke, and the act of voting requires some gas for EVM.
# You SHOULD set this to 'true' if (S_DB_IMPORT_DUMPS == true)
S_SC_FUND_ETH_ADDRESSES=true
